/*
 * ConnectFourMove.h
 *
 *  Created on: May 9, 2015
 *      Author: tom
 */

#ifndef CONNECTFOURMOVE_H_
#define CONNECTFOURMOVE_H_

#include "GameMove.h"
#include <string>
#include <vector>
#include <iostream>
/*
A ConnectFourMove encapsulates a single potential move on a ConnectFourBoard. It
is represented internally by a row and column, both 0-based.
*/
class ConnectFourMove : public GameMove {
private:
   // ConnectFourBoard is a friend so it can access mRow and mCol.
	friend class ConnectFourBoard;

   int mRow, mCol;

   // KEEP THESE CONSTRUCTORS PRIVATE.
   // Default constructor: set move all to 0.
   ConnectFourMove();
   /*
   2-parameter constructor: initializes this move with the given
   row and column.
   */
   ConnectFourMove(int row, int col);

public:
   static int mOnHeap;

   static void* operator new(std::size_t sz){
      mOnHeap++;
      std::cout << "operator new: " << mOnHeap << " ConnectFourMoves on the heap" << std::endl;
      return ::operator new(sz);
   }

      static void operator delete(void* ptr, std::size_t sz) {
      mOnHeap--;
      std::cout << "operator delete: " << mOnHeap << " ConnectFourMoves on the heap" << std::endl;
      ::operator delete(ptr);
   }

   /*
   This assignment operator takes a string representation of a ConnectFourMove
   and uses it to initialize the move. The string is in the format
   (r, c);
   */
	virtual GameMove& operator=(const std::string &);

   /*
   Compares two ConnectFourMove objects for equality.
   */
   virtual bool Equals(const GameMove &other) const;

   // Converts the ConnectFourMove into a string representation, one that could be
   virtual operator std::string() const;
};
#endif /* CONNECTFOURMOVE_H_ */
