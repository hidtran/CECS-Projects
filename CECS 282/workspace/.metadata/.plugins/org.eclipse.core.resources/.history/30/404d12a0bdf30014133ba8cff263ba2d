/*
 * TicTacToeMove.h
 *
 *  Created on: May 5, 2015
 *      Author: tom
 */

#ifndef TICTACTOEMOVE_H_
#define TICTACTOEMOVE_H_
#include "GameMove.h"
#include <string>
#include <vector>
#include <iostream>
/*
An OthelloMove encapsulates a single potential move on an OthelloBoard. It
is represented internally by a row and column, both 0-based.
*/
class TicTacToeMove : public GameMove {
private:
   // OthelloBoard is a friend so it can access mRow and mCol.
	friend class TicTacToeBoard;

   int mRow, mCol;

   // KEEP THESE CONSTRUCTORS PRIVATE.
   // Default constructor: initializes this move as a PASS.
   TicTacToeMove();
   /*
   2-parameter constructor: initializes this move with the given
   row and column.
   */
   TicTacToeMove(int row, int col);

public:
   static int mOnHeap;

   static void* operator new(std::size_t sz){
      mOnHeap++;
      std::cout << "operator new: " << mOnHeap << " OthelloMoves on the heap" << std::endl;
      return ::operator new(sz);
   }

      static void operator delete(void* ptr, std::size_t sz) {
      mOnHeap--;
      std::cout << "operator delete: " << mOnHeap << " OthelloMoves on the heap" << std::endl;
      ::operator delete(ptr);
   }

   /*
   This assignment operator takes a string representation of an Othellomove
   and uses it to initialize the move. The string is in the format
   (r, c); OR is the string "pass". [The user will not enter (-1,-1) to pass
   anymore.]
   */
	virtual GameMove& operator=(const std::string &);

   /*
   Compares two OthelloMove objects for equality.
   */
   virtual bool Equals(const GameMove &other) const;

   // Converts the OthelloMove into a string representation, one that could be
   // used correctly with operator=(string). Returns "pass" if move is a pass.
   virtual operator std::string() const;

   // Returns true if the move represents a Pass.
   // TO DO: fill in this method.
	inline bool IsPass() const {return mRow == -1 && mCol == -1;}
};

#endif /* TICTACTOEMOVE_H_ */
