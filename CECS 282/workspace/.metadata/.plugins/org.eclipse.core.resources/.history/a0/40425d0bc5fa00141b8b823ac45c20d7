/*
 * ConnectFourBoard.cpp
 *
 *  Created on: May 12, 2015
 *      Author: tom
 */
#include <iostream>
#include <vector>
#include "ConnectFourBoard.h"
#include "ConnectFourMove.h"
#include "GameMove.h"

using namespace std;

ConnectFourBoard::ConnectFourBoard() : mBoard() {
}

void ConnectFourBoard::GetPossibleMoves(vector<GameMove *> *list) const {

	for (int row = 0; row < R_SIZE; row++) {

		for (int column = 0; column < C_SIZE; column++) {

			if (InBounds(row, column)) {

				if (mBoard[row][column] == EMPTY) {

					list -> push_back(new ConnectFourMove(row, column));

				}

			}

		}

	}

	if (list -> empty()) {

		const_cast<int &> (mValue) += mNextPlayer;

	}

}

void ConnectFourBoard::ApplyMove(GameMove *move) {

	ConnectFourMove *mov = dynamic_cast<ConnectFourMove *> (move);

	if (mov == nullptr) {

		throw GameException("Invalid Connect Four Move");

	}

	mHistory.push_back(mov);

	mBoard[mov->mRow][mov->mCol] = mNextPlayer;

	mValue += mNextPlayer;

	mNextPlayer = -mNextPlayer;

}

void ConnectFourBoard::UndoLastMove() {

	ConnectFourMove *move = mHistory.back();

	mBoard[move->mRow][move->mCol] = EMPTY;

	mValue += mNextPlayer;

	mNextPlayer = -mNextPlayer;

}

