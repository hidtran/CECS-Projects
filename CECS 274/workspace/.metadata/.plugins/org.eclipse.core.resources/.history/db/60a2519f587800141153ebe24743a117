package edu.csulb.BinaryTree;

public class Tree {
	private Node root = null;
	private int length = 0;
	
	public Tree()
	{
		root = null;
		length = 0;
	}
	
	public Tree(int number)
	{
		root = new Node(number);
		length = 0;
	}
	
	public void insert(int number)
	{
		root = add(root, number);
	}
	
	private Node add(Node parent, int number)
	{
		if(parent == null)
		{
			parent = new Node(number);
		}
		else
		{
			if(number == parent.data)
			{
				System.out.println("Duplicate item on tree list");
			}
			else if(number < parent.data)
			{
				parent.left = add(parent.left, number);
			}
			else if(number > parent.data)
			{
				parent.right = add(parent.right, number);
			}
		}
		return parent;
	}
	
	public Node remove(int number)
	{
		Node current = root;
		Node parent = root;
		Node grandparent = null;
		boolean found = false;
		
		while(current.data != number)
		{
			parent = current;
			if(number < current.data)
			{
				found = true;
				current = current.left;
			}
			else
			{
				found = false;
				current = current.right;
			}
			if(current == null)
			{
				System.out.println("Item not found");
				break;
			}
		}
		
		if(current.left == null && current.right == null)
		{
			if(current == root)
			{
				root = null;
			}
			else if(found)
			{
				parent.left = null;
			}
			else
			{
				parent.right = null;
			}
		}
		else if(current.right == null)
		{
			if(current == root)
			{
				root = current.left;
			}
			else if(found)
			{
				parent.left = current.left;
			}
			else
			{
				parent.right = current.left;
			}
		}
		else if(current.left == null)
		{
			if(current == root)
			{
				root = current.right;
			}
			else if(found)
			{
				parent.left = current.right;
			}
			else
			{
				parent.right = current.left;
			}
		}
		else
		{
			Node child = delete(current);
			if(current == root)
			{
				root = child;
			}
			else if(found)
			{
				parent.left = child;
			}
			else
			{
				parent.right = child;
			}
			child.left = current.left;
			grandparent = child;
		}
		return grandparent;
	}
	
	public Node delete(Node child)
	{
		Node parent = child;
		Node replaceNode = child;
		
		Node current = child.right;
		
		while(current != null)
		{
			parent = child;
			replaceNode = current;
			current = current.left;
		}
		if(replaceNode != child.right)
		{
			parent.left = replaceNode.right;
			replaceNode.right = child.right;
		}
		return replaceNode;
	}
	
	private int getMin(Node current)
	{
		if(current == null)
		{
			return current.data;
		}
		else
		{
			return getMin(current.left);
		}
	}
	
	public void search(int number)
	{
		Node current = root;
		int count = 0;
		boolean found = false;
		while(!found && current != null)
		{
			if(current.data == number)
			{
				System.out.println("Item is on level " + count++);
				found = true;
			}
			else if(current.data > number)
			{
				current = current.left;
				count++;
			}
			else if(current.data < number)
			{
				current = current.right;
				count++;
			}
		}
		if(current == null)
		{
			if(!found)
			{
				System.out.println("Item is not found.");
			}
		}
	}
	
	public Node balance(Node parent, int number)
	{
		return parent;
	}
	
	public int getSize()
	{
		int length = size(root);
		return length;
		
	}
	
	private int size(Node current)
	{
		int length = 0;
		if(current == null)
		{
			return length;
		}
		else
		{
			length = 1 + size(current.left) + size(current.right);
		}
		return length;
	}
	public void display()
	{
		displayTree(root);
		System.out.println();
	}
	
	private static void displayTree(Node parent)
	{
		if(parent == null)
		{
			return;
		}
		displayTree(parent.left);
		System.out.println("Tree List: " + parent.data + " ");
		displayTree(parent.right);
	}
	
	public void displayStats()
	{
		
	}

	private class Node {
		private int data;
		private Node left;
		private Node right;
		
		public Node()
		{
			data = 0;	//Null character
			left = null;	//Null next node
			right = null;
		}
		public Node(int input)
		{
			data = input;	//New node character
			left = null;	//Null left node
			right = null;	//Null right Node
		}
		public int getData()
		{
			return data;	//Return a node character
		}
		public void setData(int input)
		{
			data = input;	//Set new node characterStringString
			left = null;	//Null left node
			right = null;	//Null right node
		}
		public void setChildren(Node leftSide, Node rightSide)
		{
			left = leftSide;	//Set left node
			right = rightSide; //Set right node
		}
		public Node getLeftChildren() {
			return left;	//Return left node
		}
		
		public Node getRightChildren()
		{
			return right;	//Return right node
		}
	}
}	

/*
if(parent == null)
{
	System.out.println("Item Not Found");
}

else if(parent.data > number)
{
	parent = delete(parent.left, number);
}
else if(parent.data < number)
{
	parent = delete(parent.right, number);
}
else
{
	Node grandparent = parent;
	if(parent.left == null && parent.right == null)
	{
		System.out.println("Number : " + parent.data);
		parent = null;
	}
	else if(parent.right == null)
	{
		parent = parent.left;
	}
	else if(parent.left == null)
	{
		parent = parent.right;
	}
	else
	{
		int minimum = getMin(parent);
		parent.right = delete(parent.right, minimum);
		parent.data = minimum;
	}
}
return parent;
*/